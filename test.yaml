name: CI/CD Pipeline - Flask App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # =============================
  # 1. SOURCE & BUILD STAGE
  # =============================
  build:
    name: Build & Test Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: pytest --maxfail=1 --disable-warnings -q

      - name: Run static code analysis (flake8)
        run: |
          pip install flake8
          flake8 .

  # =============================
  # 2. SECURITY & QUALITY STAGE
  # =============================
  security_scan:
    name: Static Analysis & Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run SonarCloud analysis
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=YourSonarCloudProjectKey
            -Dsonar.organization=YourSonarOrg
            -Dsonar.python.coverage.reportPaths=coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

      - name: Container vulnerability scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: my-flask-app:latest
          format: table

  # =============================
  # 3. CONTAINERIZATION STAGE
  # =============================
  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [security_scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/flask-app:latest

  # =============================
  # 4. DEPLOYMENT STAGE (AWS ECS)
  # =============================
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [docker]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy new task definition to ECS
        run: |
          aws ecs update-service \
            --cluster my-ecs-cluster \
            --service my-flask-service \
            --force-new-deployment

  # =============================
  # 5. MONITORING & LOGGING STAGE
  # =============================
  monitoring:
    name: Monitoring Setup (Prometheus/Grafana)
    runs-on: ubuntu-latest
    needs: [deploy]

    steps:
      - name: Export metrics endpoint
        run: |
          echo "Application exposes Prometheus metrics at /metrics endpoint"
          echo "Logs are streamed via CloudWatch and accessible in ECS console."

      - name: Notify deployment success
        uses: slackapi/slack-github-action@v2
        with:
          payload: |
            {
              "text": "âœ… Flask App successfully deployed and monitored on AWS ECS"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
